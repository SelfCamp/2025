:root {
    --front-size: 100vh;
    --board-size: calc(var(--front-size) / 2);
    --grid-gap: calc(var(--board-size) / 50);
    --tile-size: calc((var(--board-size) - (var(--grid-gap) * 3)) / 4);
    --tile-slide-length: calc(var(--tile-size) + var(--grid-gap));
}

/*layout*/


body {
    background-color: #FF001E;
    margin: 0;
    color: #FFC9A4;
}

header {
    display: flex;
    justify-content: center;
    align-items: center;
}

#title {
    font-size: calc(var(--board-size) /8);
    margin: 0;
    font-family: 'Rajdhani', sans-serif;
    font-weight: bold;
}

#lastletter {
    color: red;
}


nav ul {
    list-style-type: none;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;
    padding: 0;
    font-family: 'Rajdhani', sans-serif;
    font-weight: bold;
    margin: 5px;
}

nav ul li {
    border-radius: 10px;
    box-shadow: 0 5px 5px black;
    cursor: pointer;
    padding: calc(var(--board-size) /50) calc(var(--board-size) /50);
    font-size: calc(var(--board-size) /25);
}

#game {
    display: grid;
    grid-template-columns: 1fr;
    box-shadow: inset 0 0 20px #000000;
}

#front {
    background-color: #FF6700;
    display: grid;
    grid-template-columns: 1fr;
    width: calc(var(--board-size) + 30px);
    height: var(--front-size);
    margin: auto;
}

#board-header{
    display: grid;
    grid-template-columns: 1fr;
    justify-content: center;
    align-items: center;
}

#board-header ul {
    display: grid;
    grid-template-columns: 1fr 1fr;
    padding: 0;
    margin: 0;
    list-style-type: none;
}

#board-header ul li {
    display: grid;
    grid-template-columns: 1fr;
    text-align: center;
    font-family: 'Permanent Marker', cursive;
}

#board-container {
    padding: calc(var(--board-size) / 20);
    height: var(--board-size);
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;

}

#board, #board-base, #rules, #about {
    position: absolute;
    width: var(--board-size);
    height: var(--board-size);
}

#board, #board-base {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr 1fr;
    justify-content: stretch;
    justify-items: stretch;
    grid-gap: var(--grid-gap);
}

#rules {
    background-color: #FF6700;
    visibility: hidden;  /* TODO: change to `hidden` when game is ongoing */
    text-align: center;
    color: #FFC9A4;
}

#about {
    background-color: #FF6700;
    visibility: hidden;  /* TODO: change to `hidden` when game is ongoing */
    text-align: center;
    color: #FFC9A4;
}

#slide-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: auto;

}

#game-history-slider {
    bottom: 0;
}

footer {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
}

.tile {
    color: #FFFFFF;
    font-family: monospace;
    font-size: calc(var(--board-size) * 0.08);
    display: flex;
    justify-content: center ;
    align-items: center;
    border: calc(var(--board-size) / 250) solid #444444;
    border-radius: calc(var(--board-size) / 50);
}

#board-base .tile {
    background-color: #ffca7f;
}

#board .tile[value='null'] {
    visibility: hidden;
}

.tile[value='2'] {
    background-color: #000000;
}

.tile[value='4'] {
    background-color: #111111;
}

.tile[value='8'] {
    background-color: #222222;
}

.tile[value='16'] {
    background-color: #333333;
}

.tile[value='32'] {
    background-color: #444444;
}

.tile[value='64'] {
    background-color: #555555;
}

.tile[value='128'] {
    background-color: #666666;
}

.tile[value='256'] {
    background-color: #777777;
}

.tile[value='512'] {
    background-color: #888888;
}

.tile[value='1024'] {
    background-color: #999999;
}

.tile[value='2048'] {
    background-color: #AAAAAA;
}

.tile[value='1'] {
    background-color: #BBBBBB;
}

.tile[value='2049'] {
    background-color: #CCCCCC;
}


/* ANIMATION */

.tile[data-state='sliding'] {
    animation-name: slide;
    animation-duration: calc(var(--slide-duration) * 2);  /* Multiplier adds buffer to prevent flashing back to original
                                                           position during processing of `initiateMergeSpawnInDOM`.

                                                           Combined with 50% keyframe end, this results in
                                                           the tile arriving at new location after one `--slide-duration`
                                                           and then waiting there to be destroyed by
                                                           `initiateMergeSpawnInDOM` */
}

.tile[data-state='merged'] {
    animation-name: merge;
    animation-duration: 250ms;
    animation-direction: alternate;
}

.tile[data-state='spawned'] {
    animation-name: spawn;
    animation-duration: calc(var(--spawn-duration));
    animation-direction: alternate;
}

@keyframes slide {
    50% {
        transform:
                translateX(calc(var(--tile-slide-length) * var(--slide-x)))
                translateY(calc(var(--tile-slide-length) * var(--slide-y)));
    }
}

@keyframes merge {
    100% {
        background-color: red;
        transform: scale(1.1);
    }
}

@keyframes spawn {
    0% {
        visibility: hidden;
    }
    50% {
        visibility: hidden;
    }
    50.01% {
        visibility: visible;
        background-color: initial;
        transform: scale(1);
    }
    100% {
        background-color: white;
        transform: scale(1.1);
    }
}
